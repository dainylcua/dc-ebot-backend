# dc-ebot-backend

This backend application was created for a coding interview. 2017 weather station data from NOAA was used as the input stream when developing this file.

----

## Please put *2017.csv* into the *files* directory before running this program

If you do not have this file, you can get it at [NCDC's archive of global historical weather](ftp://ftp.ncdc.noaa.gov/pub/data/ghcn/daily/by_year/2017.csv.gz).

----

## Getting Started

Regardless of how you wish to run the application, you will need to wait approximately a minute or two for the .csv file stream to be parsed for the data to load. Afterwards, you can start the frontend application.

The backend server will then run on port 3001 or whatever PORT is set to in your .env file.

### Cloning (preferred)

Navigate to the directory you wish to store this repository in and run the following command in your command prompt:

```bash
git clone https://github.com/dainylcua/dc-ebot-backend.git
npm run build
```

Afterwards, you MUST put the *2017.csv* file in /dist/files, then run the following command:

```bash
npm run dev
```

### Docker (UNSTABLE)

Docker repository contains *2017.csv* file, however memory usage may be high when running the server due to large amount of data.

Navigate to the directory you wish to store this repository in and run the following commands in your command prompt:

```bash
docker image pull dainylcua/dc-ebot-backend:1.3
docker run -p 3001:3001 51eb36ae0ab3
```

## API Endpoints

### "/"

Returns a list of available routes for the API.

### "/stations"

Returns an object with the property "stations" that contains all unique station IDs.

```js
{
  stations: [
    "AE000041196",
    "AEM00041194",
    "AEM00041217",
    "AEM00041218",
    "AFM00040938",
    ...
  ]
}
```

### "/stations/:id"

Returns an object with the station's id in the "id" property and all elements that occured per day in the "days" property for the year of 2017 (if 2017.csv is used).

```js
example: `http://localhost:3001/stations/AGE00147708`

{
  "id": "AGE00147708",
  "days": {
    "20171201": {
      "TMIN": {
        "data": 83,
        "mFlag": "",
        "qFlag": "",
        "sFlag": "S",
        "observedTime": ""
      },
      "PRCP": { ... },
      ...
    },
    "20171202": { ... },
    ...
  }
}
```

### "/stations/:id/:month"

Returns an object with the station's id in the "id" property and all elements that occured per day in the "days" property of a given month for the year of 2017 (if 2017.csv is used).

```js
example: `http://localhost:3001/stations/AGE00147708/4`

{
  "id": "AGE00147708",
  "days": {
      "20170401": {
          "TMIN": {
              "data": 90,
              "mFlag": "",
              "qFlag": "",
              "sFlag": "S",
              "observedTime": ""
          },
          "PRCP": { ... },
      "20170402": { ... },
      ...
      
      "20170430": { ... }
      }
  }
}
```

### "/stations/country/:country"

Returns an object with the property "stations" that contains all unique station IDs for a given country.

```js
example: `http://localhost:3001/stations/country/US`

{
    "stations": [
        "US10adam004",
        "US10adam032",
        "US10adam051",
        ...
    ]
}
```

## Challenges faced during development

* ~~Long query times, as per initial email~~ (solved by making the .csv file parse into a global variable)
* CRITICAL: There is a potential memory leak when running too many requests too quickly to the backend server. When cloning and running from Docker, this problem occurs more often.
